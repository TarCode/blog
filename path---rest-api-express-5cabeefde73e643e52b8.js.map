{"version":3,"sources":["webpack:///path---rest-api-express-5cabeefde73e643e52b8.js","webpack:///./.cache/json/rest-api-express.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/rest-api-express.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,iBAERC,0EACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,UAAAC,OAAA,kBAA4CC,gBAAmBC,GAAA,qHAAAC,KAAA,sxMAAw5KC,aAAqkCL,MAAA,wBAAAM,KAAA,sBAA4DC,aAAgBC,KAAA","file":"path---rest-api-express-5cabeefde73e643e52b8.js","sourcesContent":["webpackJsonp([206846372140816],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/rest-api-express.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Tarcode\",\"author\":\"Taariq Isaacs\"}},\"markdownRemark\":{\"id\":\"/Users/tarcode/Desktop/tarcode33/src/pages/2017-10-12-rest-api-express/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Greetings people of the world. Today we make a REST API in NodeJS with Express.</p>\\n<h3>Whatâ€™s a REST API?</h3>\\n<p>Initially, the World Wide Web was created for documents (HTML). Today, thereâ€™s a name for every type of entity that can be identified.</p>\\n<p>REST, or Representational State Transfer or RESTful web services allows us to make requests using GET, PUT, POST and DELETE along with URLâ€™s to access and manipulate texty representations of resources. In other words, it allows us to use verbs with a URL to either receive, or manipulate data in a specific format (XML, JSON, HTML). </p>\\n<p>Oh, and the originator of the REST architecture is <a href=\\\"https://en.wikipedia.org/wiki/Roy_Fielding\\\">Roy Fielding</a> who also happens to be co-founder of the Apache HTTP Server project.</p>\\n<h3>Whatâ€™s Express?</h3>\\n<p>Express is a minimal web application framework written in NodeJS that provides with a sweet set of features that allow us to quickly set up a server side application (API or server-rendered Web App). Read more about it <a href=\\\"https://expressjs.com\\\">here</a></p>\\n<p>Now that we know what those are, lets start building!</p>\\n<h2>Creating the Server</h2>\\n<p>Create a folder <code>mkdir rest-api</code> and enter the folder <code>cd rest-api</code>.</p>\\n<p>Run <code>npm init</code> to initialize the folder as an npm respository so you can install dependancies.</p>\\n<p>Run <code>npm install express --save</code> to install Express and save it as a dependancy.</p>\\n<p>Create a file <code>touch main.js</code> .</p>\\n<p>In <code>main.js</code>:\\nRequire the express library and store it in a variable called <code>express</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>const express = require('express')</code></pre>\\n      </div>\\n<p>That would give you the ability to create an instance of an Express App by just calling <code>express()</code>. So thats what weâ€™ll do next.\\nCreate a variable called <code>app</code> and assign the <code>express()</code> call to it like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>const app = express()</code></pre>\\n      </div>\\n<p>Now we have the ability to call any of the methods provided by Express.</p>\\n<p>Letâ€™s create a simple server that runs on port 3000. </p>\\n<p>The instance of Express that we created (called <code>app</code>) gives us access to all the methods available in the Express framework. One of those methods is <code>listen</code> or in this case <code>app.listen</code>, which takes in the port number and a callback function to be executed when the method is called.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app.listen(3000, () => {\\n    console.log(\\\"App is listening on port 3000\\\");\\n})</code></pre>\\n      </div>\\n<p>Sve your file and then head to your terminal and run <code>node main.js</code> inside your project folder. You should see the message you logged showing up on the terminal now. </p>\\n<h2>Creating Routes</h2>\\n<p>Once we have our server up and running, we need to define some routes so that our server has some way of receiving requests. A route is similar to an address in that in tells the server what request is being made/what to do with the request.</p>\\n<p>To define a route, we can call either <code>app.route(\\\"/yourroute\\\")</code> with <code>/yourroute</code> being the name of the route passed in as the first parameter, or we can directly define the verb we want to use for the type of request. E.g. <code>app.get(\\\"/yourroute\\\")</code>.</p>\\n<p>Letâ€™s first create our root route, <code>/</code>, which makes a GET request and respond with a string containing <code>\\\"Hello World!\\\"</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app.get('/', (req, res) => {\\n    res.send(\\\"Hello World!)\\n})</code></pre>\\n      </div>\\n<p>Note that in the <code>app.get</code> method, the second parameter is callback which gives us access to the request - <code>req</code> and response - <code>res</code> objects which provides us with a set of methods for access the requests and responses. In this case we respond by sending a string containing <code>\\\"Hello World!\\\"</code>.</p>\\n<p>Now letâ€™s create a route to POST some JSON data to the server. With POST methods, you request the server to accept the data enclosed in the body of the request.</p>\\n<p>Letâ€™s call our POST route <code>/person</code> which accepts the response body and logs it to the console.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app.post('/person', (req, res) => {\\n    const data = req.body\\n\\n    console.log(\\\"This is the request body\\\", data);\\n\\n    // Do something with the data you just recieved\\n})</code></pre>\\n      </div>\\n<p>To make a POST request, we can use cURL as our client to make our requests from the command line: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>curl -d '{\\\"name\\\":\\\"Joe\\\", \\\"age\\\":21}' -H \\\"Content-Type: application/json\\\" -X POST http://localhost:3000/person</code></pre>\\n      </div>\\n<p>To break down that cURL post:\\n<code>curl</code> is the command and name of the application we are using to make the POST, <code>-d</code> is the data flag, which is followed by some data (in this case: <code>{\\\"name\\\": \\\"Joe\\\", \\\"age\\\": 21 }</code>), <code>-H</code> is the header flag, which indicates that the header comes next (<code>\\\"Content-Type: application/json\\\"</code>), <code>-X</code> indicates that we are now making an <code>XMLHttpRequest</code> and <code>POST</code> is the type of request. What comes after, is the URL you making the request to ðŸ˜¬.</p>\\n<p>(If you prefer something fancier you could download <a href=\\\"https://www.getpostman.com/\\\">POSTMAN</a>).</p>\\n<p>Usually you would accept the data and persist it to a database (Which weâ€™ll probably cover in the next tutorial).</p>\\n<p>In addition, you can also define PUT and DELETE routes, which accepts some form of id as a parameter and is usually used for updating and deleting individual sets of data.</p>\\n<p>Check the Github repo for this tutorial:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/TarCode/basic-rest-api\\\">Express REST API</a></li>\\n</ul>\\n<p>Check these out for some further reading:</p>\\n<ul>\\n<li><a href=\\\"http://www.restapitutorial.com/\\\">REST API Tutorial (With Video)</a></li>\\n</ul>\\n<p>Happy Coding!!! ðŸ‘½ ðŸ¤“ ðŸ‘¾</p>\",\"frontmatter\":{\"title\":\"REST API with Express\",\"date\":\"October 12, 2017\"}}},\"pathContext\":{\"path\":\"/rest-api-express/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---rest-api-express-5cabeefde73e643e52b8.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Tarcode\",\"author\":\"Taariq Isaacs\"}},\"markdownRemark\":{\"id\":\"/Users/tarcode/Desktop/tarcode33/src/pages/2017-10-12-rest-api-express/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>Greetings people of the world. Today we make a REST API in NodeJS with Express.</p>\\n<h3>Whatâ€™s a REST API?</h3>\\n<p>Initially, the World Wide Web was created for documents (HTML). Today, thereâ€™s a name for every type of entity that can be identified.</p>\\n<p>REST, or Representational State Transfer or RESTful web services allows us to make requests using GET, PUT, POST and DELETE along with URLâ€™s to access and manipulate texty representations of resources. In other words, it allows us to use verbs with a URL to either receive, or manipulate data in a specific format (XML, JSON, HTML). </p>\\n<p>Oh, and the originator of the REST architecture is <a href=\\\"https://en.wikipedia.org/wiki/Roy_Fielding\\\">Roy Fielding</a> who also happens to be co-founder of the Apache HTTP Server project.</p>\\n<h3>Whatâ€™s Express?</h3>\\n<p>Express is a minimal web application framework written in NodeJS that provides with a sweet set of features that allow us to quickly set up a server side application (API or server-rendered Web App). Read more about it <a href=\\\"https://expressjs.com\\\">here</a></p>\\n<p>Now that we know what those are, lets start building!</p>\\n<h2>Creating the Server</h2>\\n<p>Create a folder <code>mkdir rest-api</code> and enter the folder <code>cd rest-api</code>.</p>\\n<p>Run <code>npm init</code> to initialize the folder as an npm respository so you can install dependancies.</p>\\n<p>Run <code>npm install express --save</code> to install Express and save it as a dependancy.</p>\\n<p>Create a file <code>touch main.js</code> .</p>\\n<p>In <code>main.js</code>:\\nRequire the express library and store it in a variable called <code>express</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>const express = require('express')</code></pre>\\n      </div>\\n<p>That would give you the ability to create an instance of an Express App by just calling <code>express()</code>. So thats what weâ€™ll do next.\\nCreate a variable called <code>app</code> and assign the <code>express()</code> call to it like so:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>const app = express()</code></pre>\\n      </div>\\n<p>Now we have the ability to call any of the methods provided by Express.</p>\\n<p>Letâ€™s create a simple server that runs on port 3000. </p>\\n<p>The instance of Express that we created (called <code>app</code>) gives us access to all the methods available in the Express framework. One of those methods is <code>listen</code> or in this case <code>app.listen</code>, which takes in the port number and a callback function to be executed when the method is called.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app.listen(3000, () => {\\n    console.log(\\\"App is listening on port 3000\\\");\\n})</code></pre>\\n      </div>\\n<p>Sve your file and then head to your terminal and run <code>node main.js</code> inside your project folder. You should see the message you logged showing up on the terminal now. </p>\\n<h2>Creating Routes</h2>\\n<p>Once we have our server up and running, we need to define some routes so that our server has some way of receiving requests. A route is similar to an address in that in tells the server what request is being made/what to do with the request.</p>\\n<p>To define a route, we can call either <code>app.route(\\\"/yourroute\\\")</code> with <code>/yourroute</code> being the name of the route passed in as the first parameter, or we can directly define the verb we want to use for the type of request. E.g. <code>app.get(\\\"/yourroute\\\")</code>.</p>\\n<p>Letâ€™s first create our root route, <code>/</code>, which makes a GET request and respond with a string containing <code>\\\"Hello World!\\\"</code>.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app.get('/', (req, res) => {\\n    res.send(\\\"Hello World!)\\n})</code></pre>\\n      </div>\\n<p>Note that in the <code>app.get</code> method, the second parameter is callback which gives us access to the request - <code>req</code> and response - <code>res</code> objects which provides us with a set of methods for access the requests and responses. In this case we respond by sending a string containing <code>\\\"Hello World!\\\"</code>.</p>\\n<p>Now letâ€™s create a route to POST some JSON data to the server. With POST methods, you request the server to accept the data enclosed in the body of the request.</p>\\n<p>Letâ€™s call our POST route <code>/person</code> which accepts the response body and logs it to the console.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>app.post('/person', (req, res) => {\\n    const data = req.body\\n\\n    console.log(\\\"This is the request body\\\", data);\\n\\n    // Do something with the data you just recieved\\n})</code></pre>\\n      </div>\\n<p>To make a POST request, we can use cURL as our client to make our requests from the command line: </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>curl -d '{\\\"name\\\":\\\"Joe\\\", \\\"age\\\":21}' -H \\\"Content-Type: application/json\\\" -X POST http://localhost:3000/person</code></pre>\\n      </div>\\n<p>To break down that cURL post:\\n<code>curl</code> is the command and name of the application we are using to make the POST, <code>-d</code> is the data flag, which is followed by some data (in this case: <code>{\\\"name\\\": \\\"Joe\\\", \\\"age\\\": 21 }</code>), <code>-H</code> is the header flag, which indicates that the header comes next (<code>\\\"Content-Type: application/json\\\"</code>), <code>-X</code> indicates that we are now making an <code>XMLHttpRequest</code> and <code>POST</code> is the type of request. What comes after, is the URL you making the request to ðŸ˜¬.</p>\\n<p>(If you prefer something fancier you could download <a href=\\\"https://www.getpostman.com/\\\">POSTMAN</a>).</p>\\n<p>Usually you would accept the data and persist it to a database (Which weâ€™ll probably cover in the next tutorial).</p>\\n<p>In addition, you can also define PUT and DELETE routes, which accepts some form of id as a parameter and is usually used for updating and deleting individual sets of data.</p>\\n<p>Check the Github repo for this tutorial:</p>\\n<ul>\\n<li><a href=\\\"https://github.com/TarCode/basic-rest-api\\\">Express REST API</a></li>\\n</ul>\\n<p>Check these out for some further reading:</p>\\n<ul>\\n<li><a href=\\\"http://www.restapitutorial.com/\\\">REST API Tutorial (With Video)</a></li>\\n</ul>\\n<p>Happy Coding!!! ðŸ‘½ ðŸ¤“ ðŸ‘¾</p>\",\"frontmatter\":{\"title\":\"REST API with Express\",\"date\":\"October 12, 2017\"}}},\"pathContext\":{\"path\":\"/rest-api-express/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/rest-api-express.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/rest-api-express.json\n// module chunks = 206846372140816"],"sourceRoot":""}