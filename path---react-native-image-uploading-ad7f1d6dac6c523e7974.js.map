{"version":3,"sources":["webpack:///path---react-native-image-uploading-ad7f1d6dac6c523e7974.js","webpack:///./.cache/json/react-native-image-uploading.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/react-native-image-uploading.json","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","path"],"mappings":"AAAAA,cAAc,iBAERC,sFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,UAAAC,OAAA,kBAA4CC,gBAAmBC,GAAA,8HAAAC,KAAA,i3MAAkrMC,aAAwVL,MAAA,+CAAAM,KAAA,wBAAqFC,aAAgBC,KAAA","file":"path---react-native-image-uploading-ad7f1d6dac6c523e7974.js","sourcesContent":["webpackJsonp([270477315278995],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/react-native-image-uploading.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Tarcode\",\"author\":\"Taariq Isaacs\"}},\"markdownRemark\":{\"id\":\"/Users/tarcode/Desktop/tarcode33/src/pages/2017-09-25-react-native-image-upload/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><img src=\\\"https://cloudinary-res.cloudinary.com/image/upload/c_fill,w_770/dpr_1.0/React_Progressive_Web_App_2000x1100.png\\\" alt=\\\"React Native Cloudinary\\\"></p>\\n<p>Greetings creatures of the world. Today, we’re gonna upload images to Cloudinary using React Native! 😬</p>\\n<p>(“Cloudinary is the image back-end for web and mobile developers. An end-to-end solution for all your image-related needs.” - <a href=\\\"https://cloudinary.com\\\">The Cloudinary Website</a>)</p>\\n<p>First you wanna make sure you have the React Native CLI installed (We’re not using create-react-native-app). Then, you wanna signup up to <a href=\\\"https://cloudinary.com\\\">Cloudinary</a> if haven’t already.</p>\\n<p>Now let’s get down to business.🤓</p>\\n<h2>Step 1</h2>\\n<p><code>react-native init imageupload</code></p>\\n<p><code>cd imageupload</code></p>\\n<p><code>npm install</code></p>\\n<p><code>mkdir app</code></p>\\n<p><code>touch app/index.js</code></p>\\n<h2>Step 2</h2>\\n<p>Replace <code>index.android.js</code> and <code>index.ios.js</code> with the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import React from 'react'\\nimport { AppRegistry } from 'react-native'\\n\\nimport App from './app/index'\\n\\nAppRegistry.registerComponent('imageupload', () => App)</code></pre>\\n      </div>\\n<h2>Step 3</h2>\\n<p>Run <code>npm install —-save react-native-image-picker react-native-fetch-blob</code></p>\\n<p>then <code>react-native link</code>.</p>\\n<p>That should successfully install and link the packages required for accessing the file system (included with react-native-image-picker) and posting the image data to Cloudinary (react-native-fetch-blob).</p>\\n<h2>Step 4</h2>\\n<p>Before we can access files on the device, we have to ask the user for permission first. Follows these instructions to allow permissions for Android and iOS:</p>\\n<h3>iOS</h3>\\n<p>Add this to <code>ios/app_name/Info.plist</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>    <key>NSPhotoLibraryUsageDescription</key>\\n    <string>Select an existing photo for us</string>\\n    <key>NSCameraUsageDescription</key>\\n    <string>Take a photo for us</string></code></pre>\\n      </div>\\n<h3>Android</h3>\\n<p>Add this to <code>android/app/src/AndroidManifest.xml</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code><uses-permission android:name=\\\"android.permission.ACCESS_FINE_LOCATION\\\" /></code></pre>\\n      </div>\\n<h2>Step 5</h2>\\n<p>This is the main component we use to do everything. Copy it into <code>app/index.js</code> and update it with your cloudinary name and preset:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import React, { Component } from 'react'\\nimport { View, Text, TouchableOpacity, Image } from 'react-native'\\nimport ImagePicker from 'react-native-image-picker'\\nimport RNFetchBlob from 'react-native-fetch-blob'\\n\\nexport default class extends Component {\\n    constructor(props) {\\n        super(props)\\n        this.state = {\\n            avatarSource: \\\"\\\",\\n            uploadImage: false\\n        }\\n    }\\n\\n    render() {\\n        return (\\n            <View style={{\\n                flex: 1,\\n                flexDirection: 'column',\\n                backgroundColor: \\\"#FAFAFA\\\",\\n                alignItems: 'center',\\n                justifyContent: \\\"center\\\"\\n            }}>\\n                <Text>React Native Image Upload with Cloudinary!</Text>\\n                <TouchableOpacity onPress={() => {\\n                    var options = {\\n                        title: 'Select Avatar',\\n                        customButtons: [\\n                            { name: 'fb', title: 'Choose Photo from Facebook' },\\n                        ],\\n                        storageOptions: {\\n                            skipBackup: true,\\n                            path: 'images'\\n                        }\\n                    };\\n\\n                    this.setState({\\n                        uploadingImg: true\\n                    });\\n\\n                    ImagePicker.showImagePicker(options, (response) => {\\n                        console.log('Response = ', response);\\n\\n                        if (response.didCancel) {\\n                            console.log('User cancelled image picker');\\n                        }\\n                        else if (response.error) {\\n                            console.log('ImagePicker Error: ', response.error);\\n                        }\\n                        else if (response.customButton) {\\n                            console.log('User tapped custom button: ', response.customButton);\\n                        }\\n                        else {\\n                            let source = { uri: response.uri };\\n\\n                            uploadFile(response)\\n                                .then(response => response.json())\\n                                .then(result => {\\n                                    this.setState({\\n                                        avatarSource: { uri: result.secure_url },\\n                                        uploadingImg: false\\n                                    });\\n                                })\\n\\n                        }\\n                    });\\n                }} style={{\\n                    height: 80,\\n                    width: 80,\\n                    borderRadius: 40,\\n                    backgroundColor: \\\"#333\\\",\\n                    marginBottom: 20\\n                }}>\\n                    <Image source={this.state.avatarSource} style={{\\n                        height: 80,\\n                        width: 80,\\n                        borderRadius: 40\\n                    }} />\\n                </TouchableOpacity>\\n            </View>\\n        )\\n    }\\n}\\n\\nfunction uploadFile(file) {\\n    return RNFetchBlob.fetch('POST', 'https://api.cloudinary.com/v1_1/yourcloudinaryname/image/upload?upload_preset=yourcloudinarypreset', {\\n        'Content-Type': 'multipart/form-data'\\n    }, [\\n            { name: 'file', filename: file.fileName, data: RNFetchBlob.wrap(file.origURL) }\\n        ])\\n}</code></pre>\\n      </div>\\n<h2>Step 6</h2>\\n<p>Once that’s all done and dusted, run <code>react-native run-ios</code> or <code>react-native run-andoid</code> and upload your images to Cloudinary!!</p>\\n<p><a href=\\\"https://github.com/TarCode/react-native-cloudinary\\\">The code exists on Github too</a> </p>\\n<h1>👽 🤓 👾</h1>\",\"frontmatter\":{\"title\":\"React Native Image Uploading with Cloudinary\",\"date\":\"September 25, 2017\"}}},\"pathContext\":{\"path\":\"/react-native-image-uploading/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---react-native-image-uploading-ad7f1d6dac6c523e7974.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Tarcode\",\"author\":\"Taariq Isaacs\"}},\"markdownRemark\":{\"id\":\"/Users/tarcode/Desktop/tarcode33/src/pages/2017-09-25-react-native-image-upload/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><img src=\\\"https://cloudinary-res.cloudinary.com/image/upload/c_fill,w_770/dpr_1.0/React_Progressive_Web_App_2000x1100.png\\\" alt=\\\"React Native Cloudinary\\\"></p>\\n<p>Greetings creatures of the world. Today, we’re gonna upload images to Cloudinary using React Native! 😬</p>\\n<p>(“Cloudinary is the image back-end for web and mobile developers. An end-to-end solution for all your image-related needs.” - <a href=\\\"https://cloudinary.com\\\">The Cloudinary Website</a>)</p>\\n<p>First you wanna make sure you have the React Native CLI installed (We’re not using create-react-native-app). Then, you wanna signup up to <a href=\\\"https://cloudinary.com\\\">Cloudinary</a> if haven’t already.</p>\\n<p>Now let’s get down to business.🤓</p>\\n<h2>Step 1</h2>\\n<p><code>react-native init imageupload</code></p>\\n<p><code>cd imageupload</code></p>\\n<p><code>npm install</code></p>\\n<p><code>mkdir app</code></p>\\n<p><code>touch app/index.js</code></p>\\n<h2>Step 2</h2>\\n<p>Replace <code>index.android.js</code> and <code>index.ios.js</code> with the following:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import React from 'react'\\nimport { AppRegistry } from 'react-native'\\n\\nimport App from './app/index'\\n\\nAppRegistry.registerComponent('imageupload', () => App)</code></pre>\\n      </div>\\n<h2>Step 3</h2>\\n<p>Run <code>npm install —-save react-native-image-picker react-native-fetch-blob</code></p>\\n<p>then <code>react-native link</code>.</p>\\n<p>That should successfully install and link the packages required for accessing the file system (included with react-native-image-picker) and posting the image data to Cloudinary (react-native-fetch-blob).</p>\\n<h2>Step 4</h2>\\n<p>Before we can access files on the device, we have to ask the user for permission first. Follows these instructions to allow permissions for Android and iOS:</p>\\n<h3>iOS</h3>\\n<p>Add this to <code>ios/app_name/Info.plist</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>    <key>NSPhotoLibraryUsageDescription</key>\\n    <string>Select an existing photo for us</string>\\n    <key>NSCameraUsageDescription</key>\\n    <string>Take a photo for us</string></code></pre>\\n      </div>\\n<h3>Android</h3>\\n<p>Add this to <code>android/app/src/AndroidManifest.xml</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code><uses-permission android:name=\\\"android.permission.ACCESS_FINE_LOCATION\\\" /></code></pre>\\n      </div>\\n<h2>Step 5</h2>\\n<p>This is the main component we use to do everything. Copy it into <code>app/index.js</code> and update it with your cloudinary name and preset:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>import React, { Component } from 'react'\\nimport { View, Text, TouchableOpacity, Image } from 'react-native'\\nimport ImagePicker from 'react-native-image-picker'\\nimport RNFetchBlob from 'react-native-fetch-blob'\\n\\nexport default class extends Component {\\n    constructor(props) {\\n        super(props)\\n        this.state = {\\n            avatarSource: \\\"\\\",\\n            uploadImage: false\\n        }\\n    }\\n\\n    render() {\\n        return (\\n            <View style={{\\n                flex: 1,\\n                flexDirection: 'column',\\n                backgroundColor: \\\"#FAFAFA\\\",\\n                alignItems: 'center',\\n                justifyContent: \\\"center\\\"\\n            }}>\\n                <Text>React Native Image Upload with Cloudinary!</Text>\\n                <TouchableOpacity onPress={() => {\\n                    var options = {\\n                        title: 'Select Avatar',\\n                        customButtons: [\\n                            { name: 'fb', title: 'Choose Photo from Facebook' },\\n                        ],\\n                        storageOptions: {\\n                            skipBackup: true,\\n                            path: 'images'\\n                        }\\n                    };\\n\\n                    this.setState({\\n                        uploadingImg: true\\n                    });\\n\\n                    ImagePicker.showImagePicker(options, (response) => {\\n                        console.log('Response = ', response);\\n\\n                        if (response.didCancel) {\\n                            console.log('User cancelled image picker');\\n                        }\\n                        else if (response.error) {\\n                            console.log('ImagePicker Error: ', response.error);\\n                        }\\n                        else if (response.customButton) {\\n                            console.log('User tapped custom button: ', response.customButton);\\n                        }\\n                        else {\\n                            let source = { uri: response.uri };\\n\\n                            uploadFile(response)\\n                                .then(response => response.json())\\n                                .then(result => {\\n                                    this.setState({\\n                                        avatarSource: { uri: result.secure_url },\\n                                        uploadingImg: false\\n                                    });\\n                                })\\n\\n                        }\\n                    });\\n                }} style={{\\n                    height: 80,\\n                    width: 80,\\n                    borderRadius: 40,\\n                    backgroundColor: \\\"#333\\\",\\n                    marginBottom: 20\\n                }}>\\n                    <Image source={this.state.avatarSource} style={{\\n                        height: 80,\\n                        width: 80,\\n                        borderRadius: 40\\n                    }} />\\n                </TouchableOpacity>\\n            </View>\\n        )\\n    }\\n}\\n\\nfunction uploadFile(file) {\\n    return RNFetchBlob.fetch('POST', 'https://api.cloudinary.com/v1_1/yourcloudinaryname/image/upload?upload_preset=yourcloudinarypreset', {\\n        'Content-Type': 'multipart/form-data'\\n    }, [\\n            { name: 'file', filename: file.fileName, data: RNFetchBlob.wrap(file.origURL) }\\n        ])\\n}</code></pre>\\n      </div>\\n<h2>Step 6</h2>\\n<p>Once that’s all done and dusted, run <code>react-native run-ios</code> or <code>react-native run-andoid</code> and upload your images to Cloudinary!!</p>\\n<p><a href=\\\"https://github.com/TarCode/react-native-cloudinary\\\">The code exists on Github too</a> </p>\\n<h1>👽 🤓 👾</h1>\",\"frontmatter\":{\"title\":\"React Native Image Uploading with Cloudinary\",\"date\":\"September 25, 2017\"}}},\"pathContext\":{\"path\":\"/react-native-image-uploading/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/react-native-image-uploading.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/react-native-image-uploading.json\n// module chunks = 270477315278995"],"sourceRoot":""}