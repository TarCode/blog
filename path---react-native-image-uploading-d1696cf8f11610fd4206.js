webpackJsonp([0xf5ff684c0893],{"./node_modules/json-loader/index.js!./.cache/json/react-native-image-uploading.json":function(e,n){e.exports={data:{site:{siteMetadata:{title:"Tarcode",author:"Taariq Isaacs"}},markdownRemark:{id:"/Users/tarcode/Desktop/tarcode33/src/pages/2017-09-25-react-native-image-upload/index.md absPath of file >>> MarkdownRemark",html:'<p><img src="https://cloudinary-res.cloudinary.com/image/upload/c_fill,w_770/dpr_1.0/React_Progressive_Web_App_2000x1100.png" alt="React Native Cloudinary"></p>\n<p>Greetings creatures of the world. Today, we’re gonna upload images to Cloudinary using React Native! 😬</p>\n<p>(“Cloudinary is the image back-end for web and mobile developers. An end-to-end solution for all your image-related needs.” - <a href="https://cloudinary.com">The Cloudinary Website</a>)</p>\n<p>First you wanna make sure you have the React Native CLI installed (We’re not using create-react-native-app). Then, you wanna signup up to <a href="https://cloudinary.com">Cloudinary</a> if haven’t already.</p>\n<p>Now let’s get down to business.🤓</p>\n<h2>Step 1</h2>\n<p><code>react-native init imageupload</code></p>\n<p><code>cd imageupload</code></p>\n<p><code>npm install</code></p>\n<p>Create the folder where we’ll keep our main component (Which we’ll render to Android and iOS):</p>\n<p><code>mkdir app</code></p>\n<p>Create the component file:</p>\n<p><code>touch app/index.js</code></p>\n<h2>Step 2</h2>\n<p>Replace <code>index.android.js</code> and <code>index.ios.js</code> with the following:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>import React from \'react\'\nimport { AppRegistry } from \'react-native\'\n\nimport App from \'./app/index\'\n\nAppRegistry.registerComponent(\'imageupload\', () => App)</code></pre>\n      </div>\n<h2>Step 3</h2>\n<p>Run <code>npm install —-save react-native-image-picker react-native-fetch-blob</code></p>\n<p>then <code>react-native link</code>.</p>\n<p>That should successfully install and link the packages required for accessing the file system (included with react-native-image-picker) and posting the image data to Cloudinary (react-native-fetch-blob).</p>\n<h2>Step 4</h2>\n<p>Before we can access files on the device, we have to ask the user for permission first. Follows these instructions to allow permissions for Android and iOS:</p>\n<h3>iOS</h3>\n<p>Add this to <code>ios/app_name/Info.plist</code>:</p>\n<p></p>\n<h3>Android</h3>\n<p>Add this to <code>android/app/src/AndroidManifest.xml</code>:</p>\n<p></p>\n<h2>Step 5</h2>\n<p>This is the main component we use to do everything (<code>app/index.js</code>). </p>\n<p>Our imports:\n</p>\n<p>The component class:\n</p>\n<p>Replace the Cloudinary name and upload preset in the upload method with your Cloudinary name and upload_preset: </p>\n<p></p>\n<p>To create an upload preset:</p>\n<p>Login to Cloudinary</p>\n<p>Click on the settings icon (Gear icon)</p>\n<p>Click on the Upload tab</p>\n<p>Scroll down to upload presets and click add upload preset. Use the upload preset name you just created.</p>\n<p>The styles:\n</p>\n<h2>Step 6</h2>\n<p>Once that’s all done and dusted, run <code>react-native run-ios</code> or <code>react-native run-andoid</code> and upload your images to Cloudinary!!</p>\n<p><a href="https://github.com/TarCode/react-native-cloudinary">The code exists on Github too</a> </p>\n<h1>👽 🤓 👾</h1>',frontmatter:{title:"React Native Image Uploading with Cloudinary",date:"September 25, 2017"}}},pathContext:{path:"/react-native-image-uploading/"}}}});
//# sourceMappingURL=path---react-native-image-uploading-d1696cf8f11610fd4206.js.map